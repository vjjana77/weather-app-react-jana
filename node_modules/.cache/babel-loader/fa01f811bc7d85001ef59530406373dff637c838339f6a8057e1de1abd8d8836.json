{"ast":null,"code":"var _jsxFileName = \"D:\\\\REACT\\\\ss-solution-jana-task\\\\src\\\\App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport './App.css';\nimport React, { useEffect, useState } from \"react\";\nimport Select from 'react-select';\n//import Weather from './Components/Weather';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst options = [{\n  value: 'India',\n  label: 'India'\n}, {\n  value: 'UK',\n  label: 'UK'\n}, {\n  value: 'vanilla',\n  label: 'Vanilla'\n}];\nconst options2 = [{\n  country: '',\n  value: '',\n  label: 'Select State'\n}, {\n  country: 'India',\n  value: 'Chennai',\n  label: 'Chennai'\n}, {\n  country: 'India',\n  value: 'Bangalore',\n  label: 'Bangalore'\n}, {\n  country: 'UK',\n  value: 'London',\n  label: 'London'\n}];\nexport default function App() {\n  _s();\n  const [lat, setLat] = useState([]);\n  const [long, setLong] = useState([]);\n  const [data, setData] = useState([]);\n  const fetchData = async () => {\n    navigator.geolocation.getCurrentPosition(function (position) {\n      setLat(position.coords.latitude);\n      setLong(position.coords.longitude);\n    });\n    await fetch(`${process.env.REACT_APP_API_URL}/weather/?lat=${lat}&lon=${long}&units=metric&APPID=dfbbc9612ad3e9bbc36199bcfacbefe4`).then(res => res.json()).then(result => {\n      setData(result);\n      console.log(result);\n    });\n  };\n  useEffect(() => {\n    fetchData();\n  }, [lat, long]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: typeof data.main != 'undefined' ? /*#__PURE__*/_jsxDEV(Weather, {\n      weatherData: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"gE/fZZ7pzRi/f0KiE3Gj1Ld/pxs=\");\n_c = App;\nfunction Weather(weatherData) {\n  _s2();\n  const [data, setData] = useState([]);\n  const [country, setcountry] = useState();\n  const [state, setstatee] = useState();\n  const [stateOption, setstateOption] = useState([]);\n  const OnSelectionChange2 = selectedOption => {\n    setstatee(selectedOption);\n    console.log(state);\n  };\n  const OnSelectionChange = selectedOption => {\n    setcountry(selectedOption.value);\n    let states = [];\n    options2.map(statee => {\n      if (statee.country === selectedOption.value) {\n        states.push({\n          value: statee.value,\n          label: statee.label\n        });\n      }\n    });\n    setstateOption(states);\n    //setstateOption([{value:'Jana',label:'Vj Jana'}])\n    console.log(country);\n  };\n  const getWeatherDetails = async () => {\n    await fetch(`${process.env.REACT_APP_API_URL}/weather/?q=${country},${state}india&units=metric&APPID=dfbbc9612ad3e9bbc36199bcfacbefe4`).then(res => res.json()).then(result => {\n      setData(result);\n      console.log(result);\n    });\n  };\n  if (weatherData.weatherData.cod === 200) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"SS Solutions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        options: options,\n        onChange: OnSelectionChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        id: \"state\",\n        options: stateOption,\n        onChange: OnSelectionChange2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: getWeatherDetails,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Error 404\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }, this);\n  }\n}\n_s2(Weather, \"pPsJhZtYkX0oNM2PmoHy85XJydU=\");\n_c2 = Weather;\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"Weather\");","map":{"version":3,"names":["React","useEffect","useState","Select","jsxDEV","_jsxDEV","options","value","label","options2","country","App","_s","lat","setLat","long","setLong","data","setData","fetchData","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","fetch","process","env","REACT_APP_API_URL","then","res","json","result","console","log","className","children","main","Weather","weatherData","fileName","_jsxFileName","lineNumber","columnNumber","_c","_s2","setcountry","state","setstatee","stateOption","setstateOption","OnSelectionChange2","selectedOption","OnSelectionChange","states","map","statee","push","getWeatherDetails","cod","onChange","id","onClick","_c2","$RefreshReg$"],"sources":["D:/REACT/ss-solution-jana-task/src/App.js"],"sourcesContent":["import './App.css';\nimport React, { useEffect, useState } from \"react\";\nimport Select from 'react-select'\n//import Weather from './Components/Weather';\n\n\nconst options = [\n  { value: 'India', label: 'India' },\n  { value: 'UK', label: 'UK' },\n  { value: 'vanilla', label: 'Vanilla' }\n]\n\nconst options2 = [\n  { country:'', value: '', label: 'Select State' },\n  { country:'India', value: 'Chennai', label: 'Chennai' },\n  { country:'India', value: 'Bangalore', label: 'Bangalore' },\n  { country:'UK', value: 'London', label: 'London' }\n]\n\n\nexport default function App() {\n  \n  const [lat, setLat] = useState([]);\n  const [long, setLong] = useState([]);\n  const [data, setData] = useState([]);\n\n  const fetchData = async () => {\n    navigator.geolocation.getCurrentPosition(function(position) {\n      setLat(position.coords.latitude);\n      setLong(position.coords.longitude);\n    });\n\n    await fetch(`${process.env.REACT_APP_API_URL}/weather/?lat=${lat}&lon=${long}&units=metric&APPID=dfbbc9612ad3e9bbc36199bcfacbefe4`)\n    .then(res => res.json())\n    .then(result => {\n      setData(result)\n      console.log(result);\n    });\n  }\n  \n  useEffect(() => {\n    fetchData();\n  }, [lat,long])\n  \n  return (\n    <div className=\"App\">\n      \n      {(typeof data.main != 'undefined') ? (\n        <Weather weatherData={data}/>\n      ): (\n        <div></div>\n      )}\n      \n    </div>\n  );\n}\n\n\n\n\n\n\n\nfunction Weather(weatherData) {\n  const [data, setData] = useState([]);\n  const [country, setcountry] = useState();\n  const [state, setstatee] = useState();\n  const [stateOption,setstateOption] = useState([])\n\n  const OnSelectionChange2 = (selectedOption)=> {\n    setstatee(selectedOption)\n    console.log(state)\n  }\n  const OnSelectionChange = (selectedOption)=> {\n    setcountry(selectedOption.value)\n    let states = []\n    options2.map((statee)=>{\n      if(statee.country===selectedOption.value){\n        states.push({value:statee.value,label:statee.label})\n      }\n    })\n    setstateOption(states)\n    //setstateOption([{value:'Jana',label:'Vj Jana'}])\n    console.log(country)\n  }\n\n  const getWeatherDetails = async ()=>{\n    await fetch(`${process.env.REACT_APP_API_URL}/weather/?q=${country},${state}india&units=metric&APPID=dfbbc9612ad3e9bbc36199bcfacbefe4`)\n    .then(res => res.json())\n    .then(result => {\n      setData(result)\n      console.log(result);\n    });\n  }\n\n  if(weatherData.weatherData.cod===200) { \n    return(\n      <div>\n      <h1>SS Solutions</h1>\n      <Select options={options} onChange={OnSelectionChange} />\n      <Select id=\"state\" options={stateOption} onChange={OnSelectionChange2} />\n      <button onClick={getWeatherDetails} >Submit</button>\n    </div>\n    )\n  }\n  else{\n  return (<h1>Error 404</h1>)\n  }\n  \n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}